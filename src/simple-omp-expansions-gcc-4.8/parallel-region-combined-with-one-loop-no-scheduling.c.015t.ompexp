
;; Function main (main, funcdef_no=0, decl_uid=1800, cgraph_uid=0)


OMP region tree

bb 2: gimple_omp_parallel
    bb 3: gimple_omp_for
    bb 4: GIMPLE_OMP_CONTINUE
    bb 5: GIMPLE_OMP_RETURN
bb 6: GIMPLE_OMP_RETURN

Merging blocks 2 and 13
Merging blocks 2 and 7
main ()
{
  int D.1822;
  int D.1820;
  int D.1821;
  int tt.3;
  int q.2;
  int D.1817;
  int D.1816;
  int i;
  int D.1813;
  int n;
  int i;
  int D.1805;
  struct .omp_data_s.0 .omp_data_o.1;

  <bb 2>:
  .omp_data_o.1.n = n;
  __builtin_GOMP_parallel_start (main._omp_fn.0, &.omp_data_o.1, 0);
  main._omp_fn.0 (&.omp_data_o.1);
  __builtin_GOMP_parallel_end ();
  n = .omp_data_o.1.n;
  D.1805 = 0;

<L0>:
  return D.1805;

}



;; Function main._omp_fn.0 (main._omp_fn.0, funcdef_no=1, decl_uid=1807, cgraph_uid=1)

main._omp_fn.0 (struct .omp_data_s.0 * .omp_data_i)
{
  int n [value-expr: .omp_data_i->n];
  int i;
  int D.1830;
  int D.1829;
  int D.1828;
  int tt.3;
  int q.2;
  int D.1825;
  int D.1824;
  int D.1823;

  <bb 12>:

  <bb 3>:
  D.1823 = .omp_data_i->n;
  D.1824 = __builtin_omp_get_num_threads ();
  D.1825 = __builtin_omp_get_thread_num ();
  q.2 = D.1823 / D.1824;
  tt.3 = D.1823 % D.1824;
  if (D.1825 < tt.3)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 11>:
  D.1828 = q.2 * D.1825;
  D.1829 = D.1828 + tt.3;
  D.1830 = D.1829 + q.2;
  if (D.1829 >= D.1830)
    goto <bb 5>;
  else
    goto <bb 9>;

  <bb 9>:
  i = D.1829;

  <bb 4>:
  i = i + 1;
  if (i < D.1830)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 5>:

  <bb 6>:
  return;

  <bb 10>:
  tt.3 = 0;
  q.2 = q.2 + 1;
  goto <bb 11>;

}


